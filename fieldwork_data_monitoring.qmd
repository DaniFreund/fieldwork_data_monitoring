---
title: "Wolf-Beaver Stress 2023"
author: "Dani Freund"
format: 
  html:
    theme: lux
    embed-resources: true
    toc: true
editor: visual
---

# OVERVIEW OF PROJECT

Beavers are ecosystem engineers that can modify habitats, resulting in landscape alteration that persists for centuries. By killing these engineers, predators such as wolves can alter the ecological processes that result from engineering, producing long-term landscape effects. If the risk of wolf predation results in chronic stress for beavers, the presence of wolves alone may have cumulative landscape impacts. Analysis of plasma, a widely used method to measure hormones, reflects short term stress and methods to obtain samples, and can be detrimental to subjects. In contrast, hair is a stable medium that stores a record of blood-borne molecules, can remain detectable for years, and requires less invasive collection methods. Hair snares have been successfully used in DNA analysis due to their ease to deploy, minimal disturbance, and the stability of storing samples - but such methods have yet to be widely applied to hormone analysis. We will investigate the hormonal implications of long term exposure to wolf predation on beaver colonies using hair snares. We will 1) analyze hair glucocorticoid levels from captive beavers to establish a baseline measure - something that to our knowledge has not been attempted for beavers, and 2) compare hair cortisol levels between wild beavers (in wolf presence) and captive beavers (in wolf absence). Our findings will provide insight for wildlife management, and be at the forefront for non-invasive sampling methods.

![](images/Screenshot%202023-04-26%20at%207.07.52%20PM.png)

The purpose of this document is track all data entry and identify any data entry errors, as well as provide graphs that visually summarize data.

#### DATA THAT NEEDS TO BE TRACKED

-   **Video data**: Camera traps are set out at each hair snare, and videos are entered by people all over Minnesota.

-   **Beaver hair collection and processing**: Beaver hair samples are collected from hair snares in northern Minnesota, beaver carcasses from nuisance beaver trappers all over Minnesota, and captive beavers at the Minnesota Zoo and the Henry Doorly Zoo in Nebraska. Hair is being processed at the University of Minnesota, University of Michigan, and University of Wisconsin Eau Claire.

-   **Vegetation sampling**: Trees are sampled at hair snared beaver ponds in Northern Minnesota from August through the end of October.

```{r, include=FALSE}
# /Users/danifreund/Desktop/Classes/Spring 2023/PUBH 7462 Advanced Programming in R/Final_Project/fieldwork_data_monitoring
library(googledrive) # for downloading google files
library(ggplot2) # for making static plots
library(plotly) # for making interactive plots
library(shiny) # for making a shiny dashboard
library(kableExtra) # for making tables
library(here)
library(sp) # for mapping
library(sf) # replacing sp
library(terra) # for mapping
library(ggmap) # for bounding box
library(maptiles)
library(rgeos)
library(leaflet)
library(rgdal)
library(tidyr)
library(lubridate)
library(geosphere)  
library(stringr)
library(jtools)
library(viridis, quietly = TRUE)
library(devtools)
library(rphylopic)
library(dplyr)
library(ggpattern)

```

```{r, include=FALSE}
# DOWNLOADING DATA FROM GOOGLE DRIVE

# sometimes need this to authorize access to my google drive account
drive_deauth()

here()

file.download <- function(ID){
  file_id <- ID
  temp_file <- tempfile(fileext = ".csv") # creating a temporary file with .csv
  file <- drive_download(as_id(file_id),  path = temp_file)
  read.csv(temp_file)
}

transects <- file.download("128b7VHsaOiV9ZMdtM0DvEitaFL5_1jC2OHmTW56UfUQ")
snares <- file.download("1omX0nEJuQ1yhDEN9BQKks8uOF-rGxS5SfvtvR9ZB36c")
progress <- file.download("1nEKOwT6nyV6lR-GEFP-XFKG6Trn-WzE95dFecOf7Wf4")
ponds <- readOGR("2019_BeaverPonds/Master_2019_BeaverPonds.shp") #NAD83 / UTM zone 15N
ponds<-st_read("2019_BeaverPonds/Master_2019_BeaverPonds.shp")
roads <- st_read("roads/trails.reprojected/trails_reprojected.shp")

video.entry <- file.download("1zi9SEN0MQs9uOO9Xs-vv9DSmnOBPwBHPDE4nqIMjI7M")
video.data <- file.download("1eu4bubab8yKacRGzHgWQj6uJbg8rKjz06yKpkZybq9E")

hair.samples <- file.download("18SfvXeXoHP0gHIEC_Gm6JmN5o1mUgU8fxwtqbGuk2s8")
hair.processed <- file.download("1nKmNl4f4eXCD8ChgvT0UUWo8Y7wSSR6VtnPmlQ0-bCM")
```

# PROJECT TIMELINE

```{r, echo=FALSE, warning = FALSE, message=FALSE}
# downloading file
timeline <- file.download("1Sx0BsRC1efS-JvElZSVE-OP3ANeHr-ZJ84HsWKSRn60")
# CREATING TIMELINE
# defining the date
timeline$date <- with(timeline, ymd(sprintf('%04d%02d%02d', year, month, day)))
timeline <- timeline[with(timeline, order(date)), ]

# defining projects
project_levels <- c("hair snares", "vegetation availability", "physiological validation", "biological validation")
project_colors <- c("#0070C0", "#00B050", "#FFC000", "#C00000")
timeline$project <- factor(timeline$project, levels=project_levels, ordered=TRUE)

# orienting milestones
positions <- c(0.5, -0.5, 1.0, -1.0, 1.5, -1.5)
directions <- c(1, -1)

line_pos <- data.frame(
    "date"=unique(timeline$date),
    "position"=rep(positions, length.out=length(unique(timeline$date))),
    "direction"=rep(directions, length.out=length(unique(timeline$date)))
)

timeline <- merge(x=timeline, y=line_pos, by="date", all = TRUE)
timeline <- timeline[with(timeline, order(date, milestone)), ]

# seeing if we have more than one event per month
text_offset <- 0.15
timeline$month_count <- ave(timeline$date==timeline$date, timeline$date, FUN=cumsum)
# offsetting events if there is more than one per month
timeline$text_position <- (timeline$month_count * text_offset * timeline$direction) + timeline$position

# creating dataframe that has all of the months, not just the months with events
month_buffer <- 2 # starting two months before and ending two months after milestone
month_date_range <- seq(min(timeline$date) - months(month_buffer), max(timeline$date) + months(month_buffer), by='month')
month_format <- format(month_date_range, '%b %d')
month_df <- data.frame(month_date_range, month_format)

# doing the same for days
# day_date_range <- seq(min(timeline$date) - months(month_buffer), max(timeline$date) + months(month_buffer), by='day')
# day_date_range <- as.Date(
#     intersect(
#         ceiling_date(day_date_range, unit="day"),
#         floor_date(day_date_range, unit="day")
#     ),  origin = "1970-01-01"
# )
# day_format <- format(day_date_range, '%d')
# day_df <- data.frame(day_date_range, day_format)

# doing the same for years that we want to display
year_format <- format(month_date_range, '%Y')
year_df <- data.frame(month_date_range, year_format)
year_df <- year_df %>% group_by(year_format=year_format) %>% dplyr::summarize(month_date_range = min(month_date_range)) 

# adding label
timeline <- timeline %>% mutate(text_label=str_c(
  "\nDate: ", date,
  "\nRationale: ", rationale
))

# plotting the timeline
timeline_plot<-ggplot(timeline,aes(x=date, y=0, col=project, label=milestone))
timeline_plot<-timeline_plot+labs(col="Projects")
timeline_plot<-timeline_plot+scale_color_manual(values=project_colors, labels=project_levels, drop = FALSE)
timeline_plot<-timeline_plot+theme_classic()

# Plot horizontal black line for timeline
timeline_plot<-timeline_plot+geom_hline(yintercept=0, 
                color = "black", linewidth=0.3)

# Plot vertical segment lines for milestones
timeline_plot<-timeline_plot+geom_segment(data=timeline[timeline$month_count == 1,], aes(y=position,yend=0,xend=date), color='black', size=0.2)

# Plot scatter points at zero and date
timeline_plot<-timeline_plot+geom_point(aes(y=0), size=3)

# Don't show axes, appropriately position legend
timeline_plot<-timeline_plot+theme(axis.line.y=element_blank(),
                 axis.text.y=element_blank(),
                 axis.title.x=element_blank(),
                 axis.title.y=element_blank(),
                 axis.ticks.y=element_blank(),
                 axis.text.x =element_blank(),
                 axis.ticks.x =element_blank(),
                 axis.line.x =element_blank(),
                 legend.position = "bottom"
                )

# show day text
timeline_plot<-timeline_plot+geom_text(data=month_df,aes(x=month_date_range,y=-0.2, label=month_format),size=2.5,vjust=0.5, color='black', angle=90)

# Show text for each month
# timeline_plot<-timeline_plot+geom_text(data=month_df, aes(x=month_date_range,y=-0.1,label=month_format),size=2.5,vjust=0.5, color='black', angle=90)
#Show year text
timeline_plot<-timeline_plot+geom_text(data=year_df, aes(x=month_date_range,y=-0.4,label=year_format, fontface="bold", ),size=2.5, color='black')
# Show text for each milestone
timeline_plot<-timeline_plot+
  geom_text(aes(y=text_position,label=str_wrap(milestone, width=30)),size=2.5, fontface="bold")

timeline_plot
```

# VIDEO DATA

### HAVE ALL VIDEOS BEEN ENTERED?

```{r, echo=FALSE, warning = FALSE}
# removing images folder 
video.entry <- subset(video.entry, hair.snare.id != "snare_02")

if (any(video.entry$videos.entered == "no")) {
  data.1 <- subset(video.entry, videos.entered == "yes") 
  sum.1 <- sum(data.1$number.of.videos.after.cleaning)
  sum.2 <- (sum(video.entry$number.of.videos.after.cleaning))
  percent <- format(round((sum.1 / sum.2)*100, 2), scientific=FALSE)
  message(warn_wrap(
    paste(percent,"% of videos have been entered")))
}else{
  message("All videos are entered")}
```

```{r, echo=FALSE, warning = FALSE}
video.entry$videos.entered <- ifelse(video.entry$videos.entered == "no", "not completed", video.entry$videos.entered)
video.entry$videos.entered <- ifelse(video.entry$videos.entered == "yes", "completed", video.entry$videos.entered)

p <- video.entry %>%
  mutate(
    text_label = str_c( #add as text aesthetic
                       "Personnel: "  , personnel.that.entered.video.data, 
                       "\nNotes: ", notes,
                        "\nDate Collected: ", date.collected)) %>% 
  ggplot(aes(x = hair.snare.id, y=number.of.videos.after.cleaning, 
             fill = videos.entered,
             text = text_label)) +
  geom_histogram(stat = "identity", 
                 position = "stack") + 
  labs(y = "Number of Videos", x = "Snare ID") +
  scale_fill_manual(values = c("darkcyan", "cyan", "gray", "darkred"),
                    name = "Progress", 
                    labels = c("completed",
                               "not completed",
                               "na",
                               "in progress")) + theme_classic() + coord_flip() 

ggplotly(p, tooltip="text")
```

### **SPECIES CAPTURED IN VIDEOS**

```{r, echo=FALSE, warning = FALSE}
# getting beaver image
uuid <- get_uuid(name = "Castor canadensis", n = 1)
# Get the image for that uuid
img <- get_phylopic(uuid = uuid)

p <- video.data %>%
  mutate(text_label = str_c("Personnel: "  , personel,
                            "\nCheck?: ", need.double.check)) %>% 
  ggplot(aes(x = snare, 
             fill = main.species, 
           text = text_label)) +
  geom_bar() + 
  labs(y = "Hair Snare ID", 
       x = "Number of Videos") +
  scale_fill_discrete(name="Species")+
  theme_classic() 

p + add_phylopic(img = img, color = "salmon", alpha = 1, x=1.1, y=70, ysize=10) 
```

# HAIR PROCESSING

### HOW MANY SAMPLES DO WE HAVE?

```{r, echo=FALSE, warning = FALSE}
  data <- subset(hair.samples, hair.samples$sample.type == "carcass")
  number.carcass <- nrow(data)

  data.1 <- subset(hair.samples, hair.samples$sample.type == "snare")
  number.snare <- nrow(data.1)
  
message(paste("We have collected", number.carcass,"carcass samples and", number.snare, "snare samples"))

processing.carcass <- hair.samples %>% subset(started.processing == "yes"&
                                      sample.type == "carcass")

message(paste(format(round(nrow(processing.carcass)/nrow(hair.samples)*100, 2)))," % of carcass samples have started processing")

processing.snare <- hair.samples %>% subset(started.processing == "yes"&
                                      sample.type == "snare")

message(paste(format(round(nrow(processing.snare)/nrow(hair.samples)*100, 2)))," % of snare samples have started processing")
```

### CARCASS SAMPLES

```{r, echo=FALSE, warning = FALSE}
subset(hair.samples, hair.samples$sample.type=="carcass") %>% 
  ggplot(aes(x=part.of.body, fill=age, color = condition.of.carcass, pattern=sex)) + geom_bar_pattern(position = position_dodge(preserve = "single"),
                   color = "black", 
                   pattern_fill = "black",
                   pattern_angle = 45,
                   pattern_density = 0.1,
                   pattern_spacing = 0.025,
                   pattern_key_scale_factor = 0.6) +
  scale_pattern_manual(values = c(female = "stripe", unk = "none")) +
  theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + 
  labs(y = "Count", 
       x = "Part of Beaver's Body") 

```

### SNARE SAMPLES

```{r, echo=FALSE, warning = FALSE}
subset(hair.samples, hair.samples$sample.type=="snare") %>%
ggplot(aes(x = hair.snare.id, fill=amount.collected)) + 
  geom_bar() + theme_classic() + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + 
  labs(y = "Count", 
       x = "Hair Snare") +
  scale_fill_manual(values = c("darkcyan", "darkred"),
                    name = "Amount of Hair Collected", 
                    labels = c("Larger than a quarter",
                               "Less than a quarter"))
```

### POTENTIAL SAMPLES FOR EXTRACTION EXPERIMENTS

```{r, echo=FALSE, warning = FALSE}
candidate.samples<-subset(hair.samples, 
       hair.samples$sample.type == "carcass" &
       hair.samples$number.of.locations.around.body > 3 &
       hair.samples$hair.type == "both" &
       hair.samples$sex == "unk" &
       hair.samples$age == "unk" &
       hair.samples$started.processing == "no") 

message(warn_wrap("The following samples are good first samples to test extraction methods with, because they are from carcasses, they have over 3 samples per carcass, they have both down and guard hair, they are not notably female, they are not kits and not notably adults, and they have been processed yet: ", paste(candidate.samples$sample.id, collapse = ", ")))
```

# VEGETATION SAMPLING

### **WAS ALL WORK ASSIGNED TODAY FINISHED?**

```{r, echo=FALSE, warning = FALSE}
# FIGURING OUT IF ANY PONDS ASSIGNED THAT DAY WERE NOT COMPLETED

if (any(progress$in.progress == "yes")) {
  data <- progress[in.progress != "yes", ]
  message(warn_wrap("Ponds not completed today include ", 
          paste(data$a.snare.id, collapse = ", ")))
    dplyr::select(data, personnel, "snare" = a.snare.id) %>% 
      kbl() %>%
      kable_styling()
}else{
  message("All ponds assigned today were completed")}
```

### **HAS ALL DATA BEEN UPLOADED?**

```{r, echo=FALSE, warning = FALSE}
# FIGURING OUT IF DATA UPLOAD IS COMPLETE 

if (any(progress$data.upload.complete != "yes")) {
    data <- progress[progress$data.upload.complete != "yes", ]
    message(warn_wrap("Data upload is not complete for ", 
          paste(data$a.snare.id, collapse = ", ")))
    dplyr::select(data, personnel, "snare" = a.snare.id) %>% 
      kbl() %>%
      kable_styling()
  }else{
    message("All data uploaded for today")}
```

### **MAP OF WHAT HAS BEEN COMPLETED SO FAR**

```{r, include=FALSE}
# CONVERTING CRS
# FUNCTION converting csv files to coordinates 
converting.lat.long <- function(data,northing,easting){
  data_sp <- SpatialPointsDataFrame(coords = data[, c(northing, easting)], 
                                    data = data, 
                                    proj4string = CRS("+proj=utm +zone=15 +datum=WGS84 +units=m"))
# Transform to WGS84 CRS
wgs84_crs <- CRS("+proj=longlat +datum=WGS84")
data_wgs84 <- spTransform(data_sp, wgs84_crs)

# Extract latitude and longitude coordinates
data$longitude <- coordinates(data_wgs84)[, 1]
data$latitude <- coordinates(data_wgs84)[, 2]

return(data)
}

# converting the files
snares<-converting.lat.long(snares,"northing","easting")
transects.start<-converting.lat.long(transects,"start_easting","start_northing")
transects.end<-converting.lat.long(transects,"end_easting","end_northing")
transects<-converting.lat.long(transects,"start_easting","start_northing")
transects <- transects %>% rename("longitude_start"= "longitude",
                                    "latitude_start"= "latitude")
transects<-converting.lat.long(transects,"end_easting","end_northing")
transects <- transects %>% rename("longitude_end"= "longitude",
                                    "latitude_end"= "latitude")


# converting ponds file
#ponds_wgs84 <- spTransform(ponds$geometry, wgs84_crs)
```

```{r, include=FALSE}
# CLIPPING PONDS TO SNARES

# Convert the points dataframe to a spatial dataframe with points
# Specify the latitude and longitude columns in the points dataframe
points_sf <- st_as_sf(snares, coords = c("longitude", "latitude"), crs = 4269)

# changing polygons reference system
ponds<-st_transform(ponds, crs=4269)
roads<-st_transform(roads, crs=4269)

# fixing invalid geometries in the ponds dataframe
# checking for invalid geometries
invalid_geometries<-st_is_valid(ponds)
# fixing invalid geometries
data <- st_make_valid(ponds)

# Extract the extent of the points dataframe
points_extent <- st_as_sfc(st_bbox(points_sf))

# Clip the polygons dataframe to the extent of the points dataframe
ponds <- st_intersection(data, points_extent)
roads <- st_intersection(roads, points_extent)

# adding if snare has collected enough hair to snare file
progress.1<-dplyr::select(progress, "a.snare.id", "enough.hair.collected")
colnames(progress.1) <- c("hair.snare.id","enough.hair.collected")
snares <- merge(snares, progress.1, by='hair.snare.id')

```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
# creating study area map
studyarea <- get_stamenmap(
  bbox = c(left = -92.8309, bottom = 48.2967, right = -92.7743, top = 48.3211),
  maptype = "terrain",
  zoom = 13 # found in URL
)

# creating a plotly map
map<-ggmap(studyarea) +
  geom_point(
             data = snares,
             aes(x = longitude, y = latitude),
             size = 0.8,
             shape = 16,
             alpha = 0.6) +
  scale_colour_viridis_c("Snare ID") +
  theme(legend.position = "right") 

# making lines between points
# re-naming columns
transects <- transects %>% rename("s_northing"= "start_northing",
                                    "s_easting"= "start_easting",
                                  "e_northing"= "end_northing",
                                    "e_easting"= "end_easting")

transects.long <- transects %>% pivot_longer(
  cols = starts_with(c("longitude","latitude")),
  names_to = c(".value","type"),
  names_sep="_"
)

# Define a color palette
 color_pal <- colorFactor(
   palette = c("darkred","red","blue","darkcyan"),  # Define the colors for "active" and "inactive"
   domain = snares$enough.hair.collected)  # Specify the column containing the values
 
#Extract the levels/order of shop type factor
types <- levels(as.factor(snares$enough.hair.collected))
n_types <- length(types)
color_pal <- colorFactor(viridis_pal(option = "D")(n_types), levels = types)


# creating a leaflet
# leaflet automatically knows which points to plot --- SO COOL
leaf<- leaflet(data = snares) %>% 
  addProviderTiles("Stamen.Toner"
    ) %>% 
  addPolygons(data = ponds,
              color = "black",
              opacity = 1,
              fillOpacity = 0.6
              ) %>% 
  addPolylines(data = roads,
               color = "grey",
               opacity = 1) %>% 
  addCircleMarkers(data = snares,
    color = ~color_pal(enough.hair.collected),
    fillOpacity = 1,
    label = ~hair.snare.id
    ) %>% 
    addLegend(data = snares,
    title    = "Enough Hair Collected?",
    position = "bottomright",
    colors = viridis_pal(option = "D")(n_types),
    labels = types
  ) %>% 
   addCircleMarkers(data = transects.start,
    opacity = 1,
    weight = 2,
    radius = 4,
    color = "lightgreen",
    fillColor = "lightgreen",
    fillOpacity = 1,
    label = ~ transect_or_trail_ID
    ) %>% 
   addCircleMarkers(data = transects.end,
    weight = 2,
    radius = 4,
    color = "darkgreen",
    fillColor = "darkgreen",
    fillOpacity = 1,
    label = ~ transect_or_trail_ID) 

for(i in 1:nrow(transects.start)) {
  # Add polylines for each row
  leaf <- leaf %>% 
    addPolylines(lng = c(transects.start[i, "longitude"], 
                         transects.end[i, "longitude"]),
                 lat = c(transects.start[i, "latitude"], 
                         transects.end[i, "latitude"]),
                 color = "green")}

leaf
```

### VEGETATION SAMPLING PROGRESS

```{r, echo=FALSE, warning = FALSE}
# GRAPH OF POND SAMPLING PROGRESS

# changing variables to numeric
progress$predicted.days.left <- as.numeric(progress$predicted.days.left)
progress$total.days.to.complete <- as.numeric(progress$total.days.to.complete)
progress$a.snare.id <- as.factor(progress$a.snare.id)

# pivoting data longer
progress.1 <- progress %>% pivot_longer(
  cols = c(predicted.days.left, total.days.to.complete)
)

# changing labels for figure legend
progress.1$name <- ifelse(progress.1$name == "total.days.to.complete", "Total days to complete", "Predicted days left")

# Total days to complete each snare
p <- progress.1 %>%
  mutate(
    text_label = str_c( #add as text aesthetic
                       "Personnel: "  ,  personnel, 
                       "\nTrail Notes: ", trails.recorded,
                        "\nTransect Notes: ", transects.recorded)) %>% 
  ggplot(aes(x = a.snare.id, y=value, 
             fill = name,
             text = text_label)) +
  geom_histogram(stat = "identity", 
                 position = "stack") + 
  labs(y = "Days", x = "Snare ID") +
  scale_fill_manual(values = c("darkred", "darkcyan"),
                    name = "Progress", 
                    labels = c("Predicted days left",
                               "Days already spent in field")) + theme_classic() + coord_flip() 

ggplotly(p, tooltip="text")
```

```{r, include=FALSE}
# SHINY APP
#Define UI for application that draws a histogram
# ui <- fluidPage(
#  
#      # Application title
#      titlePanel("Fieldwork Monitoring"),
#  
#      # Sidebar with a slider input for number of bins 
#      sidebarLayout(
#          sidebarPanel(
#              selectInput("hair.snare.id",
#                          "Hair Snare",
#                          choices = snares$hair.snare.id)
#          ),
#          # Show a plot of the generated distribution
#          mainPanel(
#             leafletOutput("leaflet")
#          )
#      )
#  )
#  
# #  Define server logic required to draw a histogram
#  server <- function(input, output) {
#    output$leaflet <- renderLeaflet({
#      leaflet(data = snares) %>% 
#    addProviderTiles("Stamen.Terrain") %>% 
#     addPolygons(data = ponds,
#      color = "navy") %>% 
#    addCircleMarkers(data = snares,
#      label = ~ hair.snare.id,
#      color = "gold",
#      fillColor = "gold",
#      fillOpacity = 1
#      ) %>% 
#    addCircleMarkers(data = transects.start,
#      opacity = 1,
#      weight = 2,
#      radius = 4,
#      color = "green",
#      fillColor = "green",
#      fillOpacity = 1,
#      label = ~ transect_or_trail_ID) %>% 
#    addCircleMarkers(data = transects.end,
#      weight = 2,
#      radius = 4,
#      color = "red",
#      fillColor = "red",
#      fillOpacity = 1,
#      label = ~ transect_or_trail_ID)
#    })
#  }
#  
#  # Run the application 
# shinyApp(ui = ui, server = server)


```

```{r, include=FALSE}
# # Define UI for the application
# ui <- fluidPage(
#       h1(strong("Wolf predation of Beavers: Data Monitoring")),
#       h2(em("Dani Freund")),
#       strong("The total number of trees recorded today is"),
#       textOutput("answer"),
#       strong("Todays Date"),
#       textOutput("answer.1"),
#   # Add a sidebar layout to the application
#   sidebarLayout(
#   # Add the text "Shiny is fun"
#   # Add a sidebar panel around the text and inputs
#     sidebarPanel(
#       h4("Plot Parameters"),
#       checkboxInput("fit","Add line of best fit", FALSE),
#       # adding snare selector
#       selectInput("snare","Snare",
#                   choices = levels(data$snare_ID),
#                   multiple = TRUE,
#                   selected = "snare_05")
#       ),
#     mainPanel(
#       titlePanel("Beaver Stress"),
#       plotOutput("plot"),
#       plotOutput("plot.1"),
#       tableOutput("table"))
# ))
# 
# # Define the server logic
# server <- function(input, output) {
#   output$answer <- renderText({
#     (sum(as.numeric(data$number_of_trees_and_stumps_recorded), na.rm=TRUE))
#   })
#   output$answer.1 <- renderText({
#     "09-26-2022"
#   })
#   output$plot <- renderPlot({
#    p<-ggplot(data, aes(x=snare_ID, y = number_of_trees_and_stumps_recorded))+
#       geom_point() + theme_classic()
#     p
#     })
#   output$plot.1 <- renderPlot({
#     data <- subset(data,
#                    snare_ID %in% input$snare)
#     p.1<-ggplot(data, aes(x=snare_ID)) + geom_bar()
#     p.1
#     })
#   output$table <- renderTable({
#   data[]
#   })
# }
# 
# # Run the application
# shinyApp(ui = ui, server = server)
```
